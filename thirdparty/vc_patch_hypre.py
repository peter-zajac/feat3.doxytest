#!/usr/bin/env python
################################################################################
# FEAT3: Finite Element Analysis Toolbox, Version 3
# Copyright (C) 2010 - 2021 by Stefan Turek & the FEAT group
# FEAT3 is released under the GNU General Public License version 3,
# see the file 'copyright.txt' in the top level directory for details.
################################################################################
# HYPRE 2.11.2 patch for Visual Studio
# ------------------------------------------------------------------------------
# This script generates the required HYPRE config header file and patches
# a handful of HYPRE header files to ensure that the library can be compiled
# under Visual Studio 14 or higher.
#
# \author Peter Zajac
################################################################################
import os
import sys

def write_config(filename):
  # make sure that the config does not exist yet
  if os.path.isfile(filename):
    print("Config Header '%s' alrady exists" % filename)
    return
  print("Writing Config Header '%s'..." % filename)
  fo = open(filename, "wt")
  fo.write("// HYPRE config header generated by FEAT3 'vc_patch_hypre.py'\n")
  fo.write("// Note: HYPRE_HAVE_MPI and HYPRE_SEQUENTIAL are defined by the\n")
  fo.write("//       build system and are therefore not defined here.\n");
  fo.write("#define HYPRE_RELEASE_NAME \"hypre\"\n")
  fo.write("#define HYPRE_RELEASE_VERSION \"2.11.2\"\n")
  fo.write("#define HYPRE_RELEASE_DATE \"2017/03/13\"\n")
  fo.write("#define HYPRE_RELEASE_TIME \"00:00:00\"\n")
  fo.write("#define HYPRE_RELEASE_BUGS \"hypre-support@llnl.gov\"\n")
  fo.write("#define HYPRE_BIGINT 1\n")
  fo.write("#define HYPRE_MAXDIM 3\n")
  fo.write("#define HYPRE_USING_HYPRE_BLAS 1\n")
  fo.write("#define HYPRE_USING_HYPRE_LAPACK 1\n")
  fo.write("#define HYPRE_NO_GLOBAL_PARTITION 1\n")
  fo.close()

# patch_lst entry: [line-no, original, patched]
def patch_file(filename, patch_lst):
  print("Patching '%s'..." % filename)
  # create backup file if it doesn't exist
  filename_b = filename + ".backup"
  if not os.path.isfile(filename_b):
    os.rename(filename, filename_b)
  # open backup file for reading
  fi = open(filename_b, "rt")
  # open file for writing
  fo = open(filename, "wt")
  # loop over all input file lines
  lno = 0
  for line in fi:
    lno = lno + 1
    if (len(patch_lst) > 0) and (patch_lst[0][0] == lno):
      # this line is to be patched
      if line.strip() != patch_lst[0][1]:
        print("ERROR: when processing file '%s': in line %i" % (filename, lno))
        print("expected : '%s'" % patch_lst[0][1])
        print("but found: '%s'" % line.strip())
        print("Patch aborted!")
        sys.exit(1)
      # okay replace line
      fo.write(patch_lst[0][2] + "\n")
      # remove patch line
      patch_lst = patch_lst[1:]
    else:
      fo.write(line)
  # ensure that all patches were applied
  if len(patch_lst) > 0:
    print("ERROR: when processing file '%s': end of file found, but there are still patches left")
    print("Patch aborted!")
    sys.exit(1)
  # okay, that's it
  fo.close()
  fi.close()

########################################################################################################################
########################################################################################################################
########################################################################################################################

# set hypre source directory
hypre_src = os.path.join(".", "hypre", "src")

# make sure that hypre exists here
if not os.path.isfile(os.path.join(hypre_src, "HYPRE.h")):
  print("ERROR: HYPRE source not found; nothing to patch...")
  sys.exit(1)

# write config file
write_config(os.path.join(hypre_src, "HYPRE_config.h"))

# patch "src/blas/f2c.h"
patch_file(os.path.join(hypre_src, "blas", "f2c.h"), [
  [193, "#undef abs", "//#undef abs"],
  [194, "#define abs(x) ((x) >= 0 ? (x) : -(x))", "//#define abs(x) ((x) >= 0 ? (x) : -(x))"],
  [195, "#define dabs(x) (doublereal)abs(x)", "//#define dabs(x) (doublereal)abs(x)"]
])

# patch "src/lapack/f2c.h"
patch_file(os.path.join(hypre_src, "lapack", "f2c.h"), [
  [193, "#undef abs", "//#undef abs"],
  [194, "#define abs(x) ((x) >= 0 ? (x) : -(x))", "//#define abs(x) ((x) >= 0 ? (x) : -(x))"],
  [195, "#define dabs(x) (doublereal)abs(x)", "//#define dabs(x) (doublereal)abs(x)"]
])

# patch "src/distributed_ls/Euclid/SubdomainGraph_dh.c"
patch_file(os.path.join(hypre_src, "distributed_ls", "Euclid", "SubdomainGraph_dh.c"), [
  [24, "#ifndef WIN32", "#ifndef _WIN32"]
])

# patch "src/distributed_ls/Euclid/_hypre_Euclid.h"
patch_file(os.path.join(hypre_src, "distributed_ls", "Euclid", "_hypre_Euclid.h"), [
  [1428, "#ifndef WIN32", "#ifndef _WIN32"]
])

# patch "src/distributed_ls/Euclid/sig_dh.c"
patch_file(os.path.join(hypre_src, "distributed_ls", "Euclid", "sig_dh.c"), [
  [31, "#ifdef WIN32", "#ifdef _WIN32"]
])

# patch "src/utilities/timer.c"
patch_file(os.path.join(hypre_src, "utilities", "timer.c"), [
  [26, "#ifndef WIN32", "#ifndef _WIN32"],
  [39, "#ifdef WIN32", "#ifdef _WIN32"]
])

# okay
print("Patch applied successfully")
