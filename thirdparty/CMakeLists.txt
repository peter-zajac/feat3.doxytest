cmake_minimum_required (VERSION 3.9)

# enable compiler output
set (CMAKE_VERBOSE_MAKEFILE ON)

if (FEAT_HAVE_ALGLIB)
  file(GLOB alglib-list "${FEAT_SOURCE_DIR}/thirdparty/alglib/cpp/src/*.cpp")

  ADD_LIBRARY(thirdparty-alglib STATIC ${alglib-list})
  if (FEAT_COTIRE)
    cotire(thirdparty-alglib)
  endif (FEAT_COTIRE)
  SET_PROPERTY(TARGET thirdparty-alglib APPEND PROPERTY COMPILE_FLAGS " -w")
  SET_PROPERTY(TARGET thirdparty-alglib APPEND PROPERTY LINK_FLAGS " -w")
  if (${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
    SET_PROPERTY(TARGET thirdparty-alglib APPEND_STRING PROPERTY COMPILE_FLAGS " -fno-lto")
    SET_PROPERTY(TARGET thirdparty-alglib APPEND_STRING PROPERTY LINK_FLAGS " -fno-lto")
  endif (${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
endif (FEAT_HAVE_ALGLIB)

if (FEAT_HAVE_FPARSER)
  file(GLOB fparser-list "${FEAT_SOURCE_DIR}/thirdparty/fparser/*.cc")

  # The 'fpoptimizer.cc' can not be compiled with clang++, so we have to disable
  # it by adding the corresponding pre-processor define
  if (${FEAT_COMPILER_ID} STREQUAL "clang")
    ADD_DEFINITIONS(-DFP_NO_SUPPORT_OPTIMIZER)
  endif (${FEAT_COMPILER_ID} STREQUAL "clang")

  ADD_LIBRARY(thirdparty-fparser STATIC ${fparser-list})
  SET_PROPERTY(TARGET thirdparty-fparser PROPERTY COMPILE_FLAGS " -w")
  SET_PROPERTY(TARGET thirdparty-fparser APPEND PROPERTY LINK_FLAGS " -w")
endif (FEAT_HAVE_FPARSER)

if (FEAT_HAVE_UMFPACK)
  file(GLOB suite_sparse-list "${FEAT_SOURCE_DIR}/thirdparty/SuiteSparse/SuiteSparse_config/*.c")
  file(GLOB amd-list "${FEAT_SOURCE_DIR}/thirdparty/SuiteSparse/AMD/Source/*.c")
  file(GLOB umfpack-list "${FEAT_SOURCE_DIR}/thirdparty/SuiteSparse//UMFPACK/Source/*.c")

  ADD_LIBRARY(thirdparty-umfpack STATIC ${suite_sparse-list} ${amd-list} ${umfpack-list})
  if (FEAT_COTIRE)
    cotire(thirdparty-umfpack)
  endif (FEAT_COTIRE)
  SET_PROPERTY(TARGET thirdparty-umfpack APPEND PROPERTY COMPILE_FLAGS " -w -DNCHOLMOD -DDLONG -DNBLAS -DNTIMER")
  SET_PROPERTY(TARGET thirdparty-umfpack APPEND PROPERTY LINK_FLAGS " -w")
  SET_PROPERTY(TARGET thirdparty-umfpack APPEND PROPERTY INCLUDE_DIRECTORIES "${FEAT_SOURCE_DIR}/thirdparty/SuiteSparse/SuiteSparse_config/")
  SET_PROPERTY(TARGET thirdparty-umfpack APPEND PROPERTY INCLUDE_DIRECTORIES "${FEAT_SOURCE_DIR}/thirdparty/SuiteSparse/AMD/Include/")
  SET_PROPERTY(TARGET thirdparty-umfpack APPEND PROPERTY INCLUDE_DIRECTORIES "${FEAT_SOURCE_DIR}/thirdparty/SuiteSparse/UMFPACK/Include/")
endif (FEAT_HAVE_UMFPACK)

if (FEAT_HAVE_PARMETIS)
  file(GLOB gklib-list "${FEAT_SOURCE_DIR}/thirdparty/parmetis/parmetis-4.0.3/metis/GKlib/*.c")
  file(GLOB metis-list "${FEAT_SOURCE_DIR}/thirdparty/parmetis/parmetis-4.0.3/metis/libmetis/*.c")
  ADD_LIBRARY(thirdparty-metis STATIC ${gklib-list} ${metis-list})
  if (FEAT_COTIRE)
    cotire(thirdparty-metis)
  endif (FEAT_COTIRE)
  SET_PROPERTY(TARGET thirdparty-metis APPEND PROPERTY COMPILE_FLAGS " -w")
  SET_PROPERTY(TARGET thirdparty-metis APPEND PROPERTY LINK_FLAGS " -w")
  SET_PROPERTY(TARGET thirdparty-metis APPEND PROPERTY INCLUDE_DIRECTORIES "${FEAT_SOURCE_DIR}/thirdparty/parmetis/parmetis-4.0.3/metis/GKlib/")
  SET_PROPERTY(TARGET thirdparty-metis APPEND PROPERTY INCLUDE_DIRECTORIES "${FEAT_SOURCE_DIR}/thirdparty/parmetis/parmetis-4.0.3/metis/include")
  SET_PROPERTY(TARGET thirdparty-metis APPEND PROPERTY INCLUDE_DIRECTORIES "${FEAT_SOURCE_DIR}/thirdparty/parmetis/parmetis-4.0.3/metis/libmetis/")

  file(GLOB parmetis-list "${FEAT_SOURCE_DIR}/thirdparty/parmetis/parmetis-4.0.3/libparmetis/*.c")
  ADD_LIBRARY(thirdparty-parmetis STATIC ${parmetis-list})
  if (FEAT_COTIRE)
    cotire(thirdparty-parmetis)
  endif (FEAT_COTIRE)
  SET_PROPERTY(TARGET thirdparty-parmetis PROPERTY COMPILE_FLAGS " -w")
  SET_PROPERTY(TARGET thirdparty-parmetis PROPERTY LINK_FLAGS " -w")
  SET_PROPERTY(TARGET thirdparty-parmetis APPEND PROPERTY INCLUDE_DIRECTORIES "${FEAT_SOURCE_DIR}/thirdparty/parmetis/parmetis-4.0.3/metis/GKlib/")
  SET_PROPERTY(TARGET thirdparty-parmetis APPEND PROPERTY INCLUDE_DIRECTORIES "${FEAT_SOURCE_DIR}/thirdparty/parmetis/parmetis-4.0.3/metis/include/")
  SET_PROPERTY(TARGET thirdparty-parmetis APPEND PROPERTY INCLUDE_DIRECTORIES "${FEAT_SOURCE_DIR}/thirdparty/parmetis/parmetis-4.0.3/libparmetis")
  SET_PROPERTY(TARGET thirdparty-parmetis APPEND PROPERTY INCLUDE_DIRECTORIES "${FEAT_SOURCE_DIR}/thirdparty/parmetis/parmetis-4.0.3/include")
  TARGET_LINK_LIBRARIES(thirdparty-parmetis thirdparty-metis)

endif (FEAT_HAVE_PARMETIS)

if (FEAT_HAVE_ZLIB)
  file(GLOB zlib-list "${FEAT_SOURCE_DIR}/thirdparty/zlib/zlib-1.2.11/*.c")
  ADD_LIBRARY(thirdparty-zlib STATIC ${zlib-list})
  if (FEAT_COTIRE)
    cotire(thirdparty-zlib)
  endif (FEAT_COTIRE)
  SET_PROPERTY(TARGET thirdparty-zlib APPEND PROPERTY COMPILE_FLAGS " -w")
  SET_PROPERTY(TARGET thirdparty-zlib APPEND PROPERTY LINK_FLAGS " -w")
  #if (${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
  #  SET_PROPERTY(TARGET thirdparty-zlib APPEND_STRING PROPERTY COMPILE_FLAGS " -fno-lto")
  #  SET_PROPERTY(TARGET thirdparty-zlib APPEND_STRING PROPERTY LINK_FLAGS " -fno-lto")
  #endif (${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
endif (FEAT_HAVE_ZLIB)

if (FEAT_HAVE_TRIANGLE)
  # only this one source file is required
  file(GLOB triangle-list "${FEAT_SOURCE_DIR}/thirdparty/triangle/triangle.c")

  ADD_LIBRARY(thirdparty-triangle STATIC ${triangle-list})
  if (FEAT_COTIRE)
    cotire(thirdparty-triangle)
  endif (FEAT_COTIRE)
  SET_PROPERTY(TARGET thirdparty-triangle APPEND PROPERTY COMPILE_FLAGS " -w -DANSI_DECLARATORS -DTRILIBRARY")
  SET_PROPERTY(TARGET thirdparty-triangle APPEND PROPERTY LINK_FLAGS " -w")
endif (FEAT_HAVE_TRIANGLE)

if (FEAT_HAVE_HYPRE)
  file(READ filelist_hypre hypre-list-in)
  STRING(REGEX REPLACE "\n" ";" hypre-list-in "${hypre-list-in}")
  foreach(hypre-list-item ${hypre-list-in})
    SET(hypre-list "${hypre-list}" "${FEAT_SOURCE_DIR}/thirdparty/hypre/hypre-2.11.2/${hypre-list-item}")
  endforeach()
  ADD_LIBRARY (thirdparty-hypre STATIC ${hypre-list})
  configure_file(${FEAT_SOURCE_DIR}/thirdparty/config_hypre.h.in ${FEAT_SOURCE_DIR}/thirdparty/hypre/hypre-2.11.2/src/HYPRE_config.h @ONLY)
  SET_PROPERTY(TARGET thirdparty-hypre APPEND PROPERTY INCLUDE_DIRECTORIES "${FEAT_SOURCE_DIR}/thirdparty/hypre/hypre-2.11.2/src")
  SET_PROPERTY(TARGET thirdparty-hypre APPEND PROPERTY INCLUDE_DIRECTORIES "${FEAT_SOURCE_DIR}/thirdparty/hypre/hypre-2.11.2/src/parcsr_ls")
  SET_PROPERTY(TARGET thirdparty-hypre APPEND PROPERTY INCLUDE_DIRECTORIES "${FEAT_SOURCE_DIR}/thirdparty/hypre/hypre-2.11.2/src/multivector")
  SET_PROPERTY(TARGET thirdparty-hypre APPEND PROPERTY INCLUDE_DIRECTORIES "${FEAT_SOURCE_DIR}/thirdparty/hypre/hypre-2.11.2/src/krylov")
  SET_PROPERTY(TARGET thirdparty-hypre APPEND PROPERTY INCLUDE_DIRECTORIES "${FEAT_SOURCE_DIR}/thirdparty/hypre/hypre-2.11.2/src/distributed_matrix")
  SET_PROPERTY(TARGET thirdparty-hypre APPEND PROPERTY INCLUDE_DIRECTORIES "${FEAT_SOURCE_DIR}/thirdparty/hypre/hypre-2.11.2/src/matrix_matrix")
  SET_PROPERTY(TARGET thirdparty-hypre APPEND PROPERTY INCLUDE_DIRECTORIES "${FEAT_SOURCE_DIR}/thirdparty/hypre/hypre-2.11.2/src/IJ_mv")
  SET_PROPERTY(TARGET thirdparty-hypre APPEND PROPERTY INCLUDE_DIRECTORIES "${FEAT_SOURCE_DIR}/thirdparty/hypre/hypre-2.11.2/src/parcsr_block_mv")
  SET_PROPERTY(TARGET thirdparty-hypre APPEND PROPERTY INCLUDE_DIRECTORIES "${FEAT_SOURCE_DIR}/thirdparty/hypre/hypre-2.11.2/src/parcsr_mv")
  SET_PROPERTY(TARGET thirdparty-hypre APPEND PROPERTY INCLUDE_DIRECTORIES "${FEAT_SOURCE_DIR}/thirdparty/hypre/hypre-2.11.2/src/seq_mv")
  SET_PROPERTY(TARGET thirdparty-hypre APPEND PROPERTY INCLUDE_DIRECTORIES "${FEAT_SOURCE_DIR}/thirdparty/hypre/hypre-2.11.2/src/utilities")
  SET_PROPERTY(TARGET thirdparty-hypre APPEND PROPERTY INCLUDE_DIRECTORIES "${FEAT_SOURCE_DIR}/thirdparty/hypre/hypre-2.11.2/src/blas")
  if (FEAT_HAVE_MPI)
    SET_PROPERTY(TARGET thirdparty-hypre APPEND PROPERTY COMPILE_FLAGS " -w -DHYPRE_HAVE_MPI")
  else (FEAT_HAVE_MPI)
      SET_PROPERTY(TARGET thirdparty-hypre APPEND PROPERTY COMPILE_FLAGS " -w -DHYPRE_SEQUENTIAL")
  endif (FEAT_HAVE_MPI)
  SET_PROPERTY(TARGET thirdparty-hypre APPEND PROPERTY LINK_FLAGS " -w")
endif (FEAT_HAVE_HYPRE)

if (FEAT_HAVE_DEATH_HANDLER)
  ADD_LIBRARY(thirdparty-deathhandler STATIC "${FEAT_SOURCE_DIR}/thirdparty/deathhandler/DeathHandler-master/death_handler.cc")
  SET_PROPERTY(TARGET thirdparty-deathhandler APPEND PROPERTY COMPILE_FLAGS " -w")
  SET_PROPERTY(TARGET thirdparty-deathhandler APPEND PROPERTY LINK_FLAGS " -w")
endif (FEAT_HAVE_DEATH_HANDLER)

if (FEAT_HAVE_ZFP)
  if(NOT EXISTS  ${FEAT_SOURCE_DIR}/thirdparty/zfp/zfp-0.5.5)
    file(RENAME ${FEAT_SOURCE_DIR}/thirdparty/zfp/zfp-08adb27dbc7ed91373ba76312aa7e48504a02190 ${FEAT_SOURCE_DIR}/thirdparty/zfp/zfp-0.5.5)
  endif(NOT EXISTS  ${FEAT_SOURCE_DIR}/thirdparty/zfp/zfp-0.5.5)
  file(GLOB zfp-list "${FEAT_SOURCE_DIR}/thirdparty/zfp/zfp-0.5.5/src/*.c")

  ADD_LIBRARY(thirdparty-zfp STATIC ${zfp-list})
  if (FEAT_COTIRE)
    cotire(thirdparty-zfp)
  endif (FEAT_COTIRE)
  SET_PROPERTY(TARGET thirdparty-zfp APPEND PROPERTY INCLUDE_DIRECTORIES "${FEAT_SOURCE_DIR}/thirdparty/zfp/zfp-0.5.5/src")
  SET_PROPERTY(TARGET thirdparty-zfp APPEND PROPERTY INCLUDE_DIRECTORIES "${FEAT_SOURCE_DIR}/thirdparty/zfp/zfp-0.5.5/include")
  SET_PROPERTY(TARGET thirdparty-zfp APPEND PROPERTY COMPILE_FLAGS " -w")
  SET_PROPERTY(TARGET thirdparty-zfp APPEND PROPERTY LINK_FLAGS " -w")
endif (FEAT_HAVE_ZFP)
