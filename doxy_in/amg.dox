/** \page amg Algebraic Multigrid

\section amg_introduction AMG Introduction
\todo verbose description

- parallel coarse grid solver
- various submethods possible
- only rudimentary optimization on numerical and executing performance

\section amg_integration Integrating AMG in your application
As FEAT3 is initially centered on geometric multigrids and thus asumes an existing grid hierarchy, the application has to inject the algebraically generated levels into the given hierarchy.

Obviously, one needs to assemble, at least, the finest level(s) first, before one can generate coarser levels with the AMGFactory.
The common use case is to have a complete hierarchy of geometrically created grids and then to add some coarser levels between them.

Let's say we have a given level hierarchy and want to add some coarser levels, until the ranks have in average less than 16 rows on the most coarse level.
The following code snippet uses the types and objects from the poisson_dirichlet.cpp application.
Note that the transfer object always resides on the fine level of the two affected levels; thus the transfer object of the previous level has to be provided.
\code{.cpp}
 //////////////////////////////// AMG levels
    XASSERT(system_levels.size() > 0);
    while (system_levels.back()->matrix_sys.rows() / (Index)comm.size() > 16)
    {
      system_levels.push_back(std::make_shared<SystemLevelType>());
      auto& previous_level = system_levels[system_levels.size() - 2];
      Solver::AMGFactory<typename SystemLevelType::GlobalSystemMatrix, typename SystemLevelType::GlobalSystemFilter, typename SystemLevelType::GlobalSystemTransfer>
        ::new_coarse_level(previous_level->matrix_sys, previous_level->filter_sys, 0.8,
          system_levels.back()->matrix_sys, system_levels.back()->filter_sys, previous_level->transfer_sys, &comm, &system_levels.back()->gate_sys);
    }
\endcode

If your application has created some algebraic levels once and needs to update the numerical values of the matrices, it is possible to only update the numerical values
of the coarser matrices and to skip the coupling/interpolation steps.
This can greatly speed up the update, but may result in suboptimal transfer operations, if the non zero entries of the first system matrix and the follow up matrices differ to much.
\code{.cpp}
    Solver::AMGFactory<typename SystemLevelType::GlobalSystemMatrix, typename SystemLevelType::GlobalSystemFilter, typename SystemLevelType::GlobalSystemTransfer>
      ::update_coarse_level(system_levels[system_levels.size() - 2]->matrix_sys, system_levels[system_levels.size() - 2]->transfer_sys,
          system_levels[system_levels.size() - 1]->matrix_sys);
\endcode
**/
